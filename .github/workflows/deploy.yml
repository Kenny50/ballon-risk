on:
  push:
    branches:
      - main

env:
  BRANCH_NAME: main
  PROJECT_PATH: '/home/ec2-user/ballon'

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Add SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          SERVER_USER: ec2-user
          SERVER_HOSTNAME: ballon.kenciao.com
        run: |
          mkdir -p ~/.ssh/
          # put ssh key
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # write ssh config
          printf "Host server\n\tHostName ${SERVER_HOSTNAME}\n\tUser ${SERVER_USER}" >> ~/.ssh/config
          # test ssh connection
          ssh -tt -o StrictHostKeyChecking=no server "echo ssh successful"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64

      - name: Login Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Image and Push
        run: |
          docker buildx build \
            --pull --load \
            --platform linux/amd64 \
            --tag ghcr.io/${GITHUB_REPOSITORY,,}:dev \
            --cache-to type=registry,ref=ghcr.io/${GITHUB_REPOSITORY,,}:dev-build-cache,mode=max \
            --cache-from type=registry,ref=ghcr.io/${GITHUB_REPOSITORY,,}:dev-build-cache \
            .

      - name: Deploy
        run: |
          docker save ghcr.io/${GITHUB_REPOSITORY,,}:dev | gzip > ${GITHUB_REPOSITORY_ID}-${GITHUB_SHA}.tar.gz
          scp ${GITHUB_REPOSITORY_ID}-${GITHUB_SHA}.tar.gz server:/tmp/

          ssh server  -o 'RequestTTY=force' "
            sudo su - -c '
              cd ${{ env.PROJECT_PATH }} &&

              docker load --input /tmp/${GITHUB_REPOSITORY_ID}-${GITHUB_SHA}.tar.gz &&
              rm /tmp/${GITHUB_REPOSITORY_ID}-${GITHUB_SHA}.tar.gz &&
              docker images &&
              docker-compose up -d &&
              (docker image prune --force || true)
            '
          "